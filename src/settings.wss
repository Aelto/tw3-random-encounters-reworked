
function RER_menu(group: name, item: name): string {
  return theGame.GetInGameConfigWrapper()
    .GetVarValue(group, item);
}

function RER_getGeneralIntensity(scale: float): float {
  // the menu slider is expected to be a number from 0% to 500%,
  // it is then multiplied by 0.01 to bring it in the [0;5] range
  var output: float = StringToFloat(
    RER_menu('RERmain', 'RERgeneralIntensity')
  ) * 0.01;

  return PowF(output, scale);
}

function RER_withGeneralIntensity(v: float, scale: float): float {
  return v * RER_getGeneralIntensity(scale);
}
 
class RE_Settings {

  public var is_enabled: bool;

  public var customDayMax, customDayMin, customNightMax, customNightMin  : int;
  public var all_monster_hunt_chance_day: int;
  public var all_monster_contract_chance_day: int;
  public var all_monster_ambush_chance_day: int;
  public var all_monster_hunt_chance_night: int;
  public var all_monster_contract_chance_night: int;
  public var all_monster_ambush_chance_night: int;
  public var all_monster_hunting_ground_chance_day: int;
  public var all_monster_hunting_ground_chance_night: int;
  public var monster_contract_longevity: float;
  public var enableTrophies : bool;
  public var selectedDifficulty : RER_Difficulty;
  public var enemy_count_multiplier : int;

  public var allow_big_city_spawns: bool;

  // controls whether or not geralt will comment
  // when an encounter appears
  public var geralt_comments_enabled: bool;

  // controls whether or not RER shows notifications
  public var hide_next_notifications: bool;

  // controls whether or not RER encounters will drop loot
  public var enable_encounters_loot: bool;

  // tells how much impact an external factor has on a creature
  // spawning chances.
  public var external_factors_coefficient: float;

  public var minimum_spawn_distance: float;
  public var spawn_diameter: float;
  public var kill_threshold_distance: float;

  public var trophies_enabled_by_encounter: array<bool>;

  // uses the enum EncounterType as the index
  public var crowns_amounts_by_encounter: array<int>;

  public var trophy_pickup_scene: bool;
  public var trophy_pickup_scene_chance: int;

  public var only_known_bestiary_creatures: bool;

  public var max_level_allowed: int;
  public var min_level_allowed: int;

  public var trophy_price: TrophyVariant;

  public var event_system_interval: float;

  public var foottracks_ratio: int;

  public var use_pathfinding_for_trails: bool;

  public var disable_camera_scenes : bool;

  // scenes that play when ambushed, or when a contract start nearby, etc...
  public var enable_action_camera_scenes : bool;

  public var ecosystem_community_power_effect: float;

  public var ecosystem_community_power_spread: float;

  public var ecosystem_community_natural_death_speed: float;

  public var settlement_delay_multiplier: float;

  public var additional_delay_per_player_level: int;

  public var dynamic_creatures_size: bool;

  function loadXMLSettings() {
    var inGameConfigWrapper: CInGameConfigWrapper;

    inGameConfigWrapper = theGame.GetInGameConfigWrapper();

    this.loadMainMenuSettings(inGameConfigWrapper);
    this.loadModEnabledSettings(inGameConfigWrapper);
    this.loadMonsterHuntsChances(inGameConfigWrapper);
    this.loadMonsterContractsChances(inGameConfigWrapper);
    this.loadMonsterHuntingGroundChances(inGameConfigWrapper);
    this.loadMonsterAmbushChances(inGameConfigWrapper);
    this.loadMonsterContractsLongevity(inGameConfigWrapper);
    this.loadCustomFrequencies(inGameConfigWrapper);

    this.loadDifficultySettings(inGameConfigWrapper);
    this.loadCitySpawnSettings(inGameConfigWrapper);

    this.fillSettingsArrays();
    this.loadTrophiesSettings(inGameConfigWrapper);
    this.loadCrownsSettings(inGameConfigWrapper);
    this.loadGeraltCommentsSettings(inGameConfigWrapper);
    this.loadHideNextNotificationsSettings(inGameConfigWrapper);
    this.loadEnableEncountersLootSettings(inGameConfigWrapper);
    this.loadExternalFactorsCoefficientSettings(inGameConfigWrapper);
    this.loadAdvancedDistancesSettings(inGameConfigWrapper);
    this.loadAdvancedLevelsSettings(inGameConfigWrapper);
    this.loadOnlyKnownBestiaryCreaturesSettings(inGameConfigWrapper);
    this.loadAdvancedEventSystemSettings(inGameConfigWrapper);
    this.loadAdvancedPerformancesSettings(inGameConfigWrapper);
    this.loadEcosystemSettings(inGameConfigWrapper);

    this.dynamic_creatures_size = inGameConfigWrapper.GetVarValue('RERoptionalFeatures', 'RERdynamicCreaturesSize');
  }

  function loadXMLSettingsAndShowNotification() {
    this.loadXMLSettings();

    theGame
    .GetGuiManager()
    .ShowNotification("Random Encounters Reworked settings loaded");
  }

  private function loadMainMenuSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    this.enable_action_camera_scenes = inGameConfigWrapper.GetVarValue('RERoptionalFeatures', 'enableActionCameraScenes');
  }

  private function loadDifficultySettings(inGameConfigWrapper: CInGameConfigWrapper) {
    selectedDifficulty = StringToInt(inGameConfigWrapper.GetVarValue('RERmain', 'Difficulty'));
    this.enemy_count_multiplier = StringToInt(inGameConfigWrapper.GetVarValue('RERcreatureTypeMultiplier', 'RERenemyCountMultiplier'));
  }

  private function loadGeraltCommentsSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    this.geralt_comments_enabled = inGameConfigWrapper.GetVarValue('RERoptionalFeatures', 'geraltComments');
  }

  private function loadHideNextNotificationsSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    this.hide_next_notifications = inGameConfigWrapper.GetVarValue('RERoptionalFeatures', 'hideNextNotifications');
  }

  private function loadEnableEncountersLootSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    this.enable_encounters_loot = inGameConfigWrapper.GetVarValue('RERoptionalFeatures', 'enableEncountersLoot');
  }

  private function loadExternalFactorsCoefficientSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    this.external_factors_coefficient = StringToFloat(
      inGameConfigWrapper.GetVarValue('RERmain', 'externalFactorsImpact')
    );
  }

  private function loadOnlyKnownBestiaryCreaturesSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    #ifdef ENABLE_BESTIARY_FEATURE {
      this.only_known_bestiary_creatures = inGameConfigWrapper.GetVarValue('RERoptionalFeatures', 'RERonlyKnownBestiaryCreatures');
    };
  }

  private function loadTrophiesSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    this.trophies_enabled_by_encounter[EncounterType_DEFAULT] = inGameConfigWrapper.GetVarValue('RERmonsterTrophies', 'RERtrophiesAmbush');
    this.trophies_enabled_by_encounter[EncounterType_HUNT] = inGameConfigWrapper.GetVarValue('RERmonsterTrophies', 'RERtrophiesHunt');
    this.trophies_enabled_by_encounter[EncounterType_CONTRACT] = inGameConfigWrapper.GetVarValue('RERmonsterTrophies', 'RERtrophiesContract');
    this.trophies_enabled_by_encounter[EncounterType_HUNTINGGROUND] = inGameConfigWrapper.GetVarValue('RERmonsterTrophies', 'RERtrophiesHuntingGround');
    this.trophy_pickup_scene_chance = StringToInt(inGameConfigWrapper.GetVarValue('RERoptionalFeatures', 'RERtrophyPickupAnimation'));
    this.trophy_pickup_scene = this.trophy_pickup_scene_chance > 0;

    this.trophy_price = StringToInt(inGameConfigWrapper.GetVarValue('RERmonsterTrophies', 'RERtrophiesPrices'));
  }

  private function loadCrownsSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    this.crowns_amounts_by_encounter[EncounterType_DEFAULT] = StringToInt(inGameConfigWrapper.GetVarValue('RERmonsterCrowns', 'RERcrownsAmbush'));
    this.crowns_amounts_by_encounter[EncounterType_HUNT] = StringToInt(inGameConfigWrapper.GetVarValue('RERmonsterCrowns', 'RERcrownsHunt'));
    this.crowns_amounts_by_encounter[EncounterType_CONTRACT] = StringToInt(inGameConfigWrapper.GetVarValue('RERmonsterCrowns', 'RERcrownsContract'));
    this.crowns_amounts_by_encounter[EncounterType_HUNTINGGROUND] = StringToInt(inGameConfigWrapper.GetVarValue('RERmonsterCrowns', 'RERcrownsHuntingGround'));
  }

  private function loadCustomFrequencies(inGameConfigWrapper: CInGameConfigWrapper) {
    customDayMax = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'customdFrequencyHigh'));
    customDayMin = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'customdFrequencyLow'));
    customNightMax = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'customnFrequencyHigh'));
    customNightMin = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'customnFrequencyLow'));
    settlement_delay_multiplier = StringToFloat(inGameConfigWrapper.GetVarValue('RERencountersSettlement', 'RERsettlementDelayMultiplier'));
    additional_delay_per_player_level = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'RERadditionalDelayPerPlayerLevel'));
  }

  private function loadMonsterHuntingGroundChances(inGameConfigWrapper: CInGameConfigWrapper) {
    this.all_monster_hunting_ground_chance_day = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersHuntingGroundDay', 'allMonsterHuntingGroundChanceDay'));
    this.all_monster_hunting_ground_chance_night = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersHuntingGroundNight', 'allMonsterHuntingGroundChanceNight'));
  }

  private function loadMonsterHuntsChances(inGameConfigWrapper: CInGameConfigWrapper) {
    this.all_monster_hunt_chance_day = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersHuntDay', 'allMonsterHuntChanceDay'));
    this.all_monster_hunt_chance_night = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersHuntNight', 'allMonsterHuntChanceNight'));
  }

  private function loadMonsterContractsChances(inGameConfigWrapper: CInGameConfigWrapper) {
    this.all_monster_contract_chance_day = StringToInt(
      inGameConfigWrapper.GetVarValue('RERencountersContractDay', 'allMonsterContractChanceDay')
    );

    this.all_monster_contract_chance_night = StringToInt(
      inGameConfigWrapper.GetVarValue('RERencountersContractNight', 'allMonsterContractChanceNight')
    );
  }

  private function loadMonsterAmbushChances(inGameConfigWrapper: CInGameConfigWrapper) {
    this.all_monster_ambush_chance_day = StringToInt(
      inGameConfigWrapper.GetVarValue('RERencountersAmbushDay', 'allMonsterAmbushChanceDay')
    );

    this.all_monster_ambush_chance_night = StringToInt(
      inGameConfigWrapper.GetVarValue('RERencountersAmbushNight', 'allMonsterAmbushChanceNight')
    );
  }

  private function loadMonsterContractsLongevity(inGameConfigWrapper: CInGameConfigWrapper) {
    this.monster_contract_longevity = StringToFloat(
      inGameConfigWrapper.GetVarValue('RERencountersContractDay', 'RERMonsterContractLongevity')
    );
  }

  public function shouldResetRERSettings(inGameConfigWrapper: CInGameConfigWrapper): bool {
    return StringToFloat(inGameConfigWrapper.GetVarValue('RERmain', 'RERmodVersion')) <= 0;
  }

  private function loadModEnabledSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    this.is_enabled = inGameConfigWrapper.GetVarValue('RERmain', 'RERmodEnabled');
  }

  public function resetRERSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    var constants: RER_Constants;

    constants = RER_Constants();

    inGameConfigWrapper.ApplyGroupPreset('RERmain', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencounters', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersGeneral', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersConstraints', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersSettlement', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersAmbushDay', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersAmbushNight', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersHuntDay', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersHuntNight', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersContractDay', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersContractNight', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersHuntingGroundDay', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERencountersHuntingGroundNight', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERevents', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERoptionalFeatures', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERmonsterCrowns', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERmonsterTrophies', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERkillingSpreeCustomLoot', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERecosystem', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERcreatureTypeMultiplier', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERcontracts', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERrewardsGeneral', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERcontainerRefill', 0);
    inGameConfigWrapper.ApplyGroupPreset('RERtutorials', 0);

    inGameConfigWrapper.SetVarValue('RERmain', 'RERmodVersion', constants.version);
    theGame.SaveUserSettings();
  }


  private function fillSettingsArrays() {
    var i: int;

    if (this.trophies_enabled_by_encounter.Size() == 0) {
      for (i = 0; i < EncounterType_MAX; i += 1) {
        this.trophies_enabled_by_encounter.PushBack(false);
      }
    }

    if (this.crowns_amounts_by_encounter.Size() == 0) {
      for (i = 0; i < EncounterType_MAX; i += 1) {
        this.crowns_amounts_by_encounter.PushBack(0);
      }
    }
  }

  private function loadAdvancedEventSystemSettings(out inGameConfigWrapper : CInGameConfigWrapper) {
    this.event_system_interval = StringToFloat(inGameConfigWrapper.GetVarValue('RERevents', 'eventSystemInterval'));
  }

  private function loadAdvancedDistancesSettings(out inGameConfigWrapper : CInGameConfigWrapper) {
    this.minimum_spawn_distance   = StringToFloat(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'minSpawnDistance'));
    this.spawn_diameter           = StringToFloat(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'spawnDiameter'));
    this.kill_threshold_distance  = StringToFloat(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'killThresholdDistance'));

    if (this.minimum_spawn_distance < 10 || this.spawn_diameter < 10 || this.kill_threshold_distance < 100) {
      inGameConfigWrapper.ApplyGroupPreset('RERadvancedDistances', 0);

      this.minimum_spawn_distance   = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'minSpawnDistance'));
      this.spawn_diameter           = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'spawnDiameter'));
      this.kill_threshold_distance  = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'killThresholdDistance'));
      theGame.SaveUserSettings();
    }

    if (RER_isPerformanceModeEnabled()) {
      this.kill_threshold_distance = MinF(200, this.kill_threshold_distance);
    }
  }

  private function loadAdvancedLevelsSettings(out inGameConfigWrapper: CInGameConfigWrapper) {
    this.min_level_allowed = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'RERminLevelRange'));
    this.max_level_allowed = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'RERmaxLevelRange'));
  }

  private function loadAdvancedPerformancesSettings(out inGameConfigWrapper : CInGameConfigWrapper) {
    this.foottracks_ratio = 100 / Max(
      StringToInt(inGameConfigWrapper.GetVarValue('RERencountersGeneral', 'RERfoottracksRatio')),
      1
    );
    this.disable_camera_scenes = inGameConfigWrapper.GetVarValue( 'RERoptionalFeatures', 'RERcameraScenesDisabled' );
    this.use_pathfinding_for_trails = inGameConfigWrapper.GetVarValue('RERoptionalFeatures', 'RERtrailsUsePathFinding');
  }

  private function loadEcosystemSettings(out inGameConfigWrapper: CInGameConfigWrapper) {
    this.ecosystem_community_power_effect = StringToFloat(inGameConfigWrapper.GetVarValue('RERecosystem', 'ecosystemCommunityPowerEffect'));
    this.ecosystem_community_power_spread = StringToFloat(inGameConfigWrapper.GetVarValue('RERecosystem', 'ecosystemCommunityPowerSpread')) / 100;
    this.ecosystem_community_natural_death_speed = StringToFloat(inGameConfigWrapper.GetVarValue('RERecosystem', 'ecosystemCommunityNaturalDeathSpeed')) / 100;
  }

  private function loadCitySpawnSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    this.allow_big_city_spawns = inGameConfigWrapper.GetVarValue('RERencountersSettlement', 'allowSpawnInBigCities');
  }

  public function toggleEnabledSettings() {
    var inGameConfigWrapper: CInGameConfigWrapper;

    inGameConfigWrapper = theGame.GetInGameConfigWrapper();

    inGameConfigWrapper.SetVarValue(
      'RERmain',
      'RERmodEnabled',
      !this.is_enabled
    );

    theGame.SaveUserSettings();

    this.loadModEnabledSettings(inGameConfigWrapper);
  }
}
