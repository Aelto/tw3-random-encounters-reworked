
// an empty statemachine only to use latent functions when the player presses the
// input to analyze the surrounding areas
statemachine class RER_EcosystemAnalyzer extends CEntity {
  var ecosystem_manager: RER_EcosystemManager;

  public function init(manager: RER_EcosystemManager) {
    this.ecosystem_manager = manager;
    theInput.RegisterListener(this, 'OnAnalyseEcosystem', 'EcosystemAnalyse');
    
    this.GotoState('Waiting');
  }

  event OnAnalyseEcosystem(action: SInputAction) {
    if (IsPressed(action) && this.GetCurrentStateName() != 'Analysing') {
      this.GotoState('Analysing');
    }
  }
}

state Waiting in RER_EcosystemAnalyzer {}

// this state creates a pop-up that displays more information about the surrounding
// ecosystems. It also shows the closests two bounties and gives information about
// them too, such as the distance and the creature from the bounty.
state Analysing in RER_EcosystemAnalyzer {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    NLOG("RER_EcosystemAnalyzer - state ANALYSING");

    this.startAnalysing();
  }

  entry function startAnalysing() {
    (new RER_RandomDialogBuilder in parent)
     .start()
     .either(new REROL_ill_check_area_data in parent, false, 1)
     .either(new REROL_see_if_i_can_learn_what_out_there_data in parent, false, 1)
     .either(new REROL_mhm_data in parent, false, 1)
     .play();

    Sleep(0.5);

    this.playAnimation();

    Sleep(1.5);

    this.openBookPopup(
      this.getSurroundingCreaturesPercentages()
    );

    this.stopAnimation();

    parent.GotoState('Waiting');
  }

  latent function playRandomNothingOneliner() {
    if (RandRange(10) < 3) {
      REROL_nothing(true);
    }
    else if (RandRange(10) < 3) {
      REROL_nothing_here(true);
    }
    else {
      REROL_nothing_interesting(true);
    }
  }

  latent function playAnimation() {
		thePlayer.PlayerStartAction( PEA_ExamineGround, '' );
  }

  latent function stopAnimation() {
    thePlayer.PlayerStopAction( PEA_ExamineGround );
  }

  function getSurroundingCreaturesPercentages(): array<RER_SurroundingCreaturePercentage> {
    var output: array<RER_SurroundingCreaturePercentage>;
    var modifiers: array<float>;
    var positive_total: float;
    var negative_total: float;
    var percent: float;
    var i: int;

    modifiers = parent.ecosystem_manager.getCreatureModifiersForEcosystemAreas(
      parent.ecosystem_manager.getCurrentEcosystemAreas()
    );

    // first we get the total
    for (i = 0; i < CreatureMAX; i += 1) {
      if (modifiers[i] > 0) {
        positive_total += modifiers[i];
      }
      else {
        // we want the total to also be positive
        negative_total += modifiers[i];
      }

      NLOG("getSurroundingCreaturesPercentages - current modifier = " + modifiers[i]);
    }

    negative_total = AbsF(negative_total);

    // then for all creature with modifiers
    for (i = 0; i < CreatureMAX; i += 1) {
      if (modifiers[i] != 0) {
        if (modifiers[i] > 0) {
          percent = modifiers[i] / positive_total;
        }
        else {
          percent = modifiers[i] / negative_total;
        }

        NLOG("getSurroundingCreaturesPercentages - percent for " + (i as CreatureType) + " - " + percent);

        // only creatures whose percentage is above 5
        // if (percent > 0.05 || percent < -0.05) {
          output.PushBack(newSurroundingCreaturePercentage(i,percent));
        // }
      }
    }

    return output;
  }

  latent function openBookPopup(creatures: array<RER_SurroundingCreaturePercentage>) {
    var sorted_creatures_ascending: array<RER_SurroundingCreaturePercentage>;
    var picked_creature: RER_SurroundingCreaturePercentage;
    var less_likely_creature_names: string;
    var teeming_creature_names: string;
    var message: string;
    var i: int;

    if (creatures.Size() == 0) {
      this.playRandomNothingOneliner();

      return;
    }

    sorted_creatures_ascending = this.sortCreaturePercentagesAscending(creatures);

    NLOG("positive sorted creatures size " + sorted_creatures_ascending.Size());

    if (sorted_creatures_ascending.Size() == 0) {
      this.playRandomNothingOneliner();

      return;
    }

    message = GetLocStringByKey('rer_surround_ecosystem_popup_body');

    teeming_creature_names = "";
    picked_creature = sorted_creatures_ascending[sorted_creatures_ascending.Size()-1];

    if (picked_creature.percentage > 0) {
      teeming_creature_names += getCreatureNameFromCreatureType(
        parent.ecosystem_manager.master.bestiary,
        picked_creature.type
      );
    }
    
    if (sorted_creatures_ascending.Size() > 1) {
      picked_creature = sorted_creatures_ascending[sorted_creatures_ascending.Size() - 2];

      if (picked_creature.percentage > 0) {
        teeming_creature_names += " "
          + GetLocStringByKey('rer_and')
          + " "
          + getCreatureNameFromCreatureType(parent.ecosystem_manager.master.bestiary, picked_creature.type);
      }
    }

    message = StrReplace(message, "{{teeming_creature_names}}", teeming_creature_names);
    less_likely_creature_names = "";
    picked_creature = sorted_creatures_ascending[0];

    if (picked_creature.percentage < 0) {
      less_likely_creature_names += getCreatureNameFromCreatureType(parent.ecosystem_manager.master.bestiary, picked_creature.type);
    }
    
    if (sorted_creatures_ascending.Size() > 1) {
      picked_creature = sorted_creatures_ascending[1];
      less_likely_creature_names += " "
        + GetLocStringByKey('rer_and')
        + " "
        + getCreatureNameFromCreatureType(parent.ecosystem_manager.master.bestiary, picked_creature.type);
    }
    
    message = StrReplace(message, "{{less_likely_creature_names}}", less_likely_creature_names);
    
    picked_creature = sorted_creatures_ascending[sorted_creatures_ascending.Size() - 1];
    message = StrReplace(message, "{{ecosystem_advice}}", this.getEcosystemAdvice(picked_creature.type));
    message = StrReplace(message, "{{ecosystem_delay_multiplier}}", this.getMessageAboutEcosystemDelayMultiplier());

    RER_openPopup(GetLocStringByKey("rer_surround_ecosystem_popup_title"), message);

    if (RandRange(10) < 1) {
      (new RER_RandomDialogBuilder in thePlayer)
        .start()
        .either(new REROL_well_well_still_learning in thePlayer, true, 0.5)
        .play();
    }
  }

  function sortCreaturePercentagesAscending(percentages: array<RER_SurroundingCreaturePercentage>): array<RER_SurroundingCreaturePercentage> {
    var output: array<RER_SurroundingCreaturePercentage>;
    var sorted_percentages: array<float>;
    var sorted_size: int;
    var i, j: int;

    // first we fill the array with the percentages
    for (i = 0; i < percentages.Size(); i += 1) {
      sorted_percentages.PushBack(percentages[i].percentage);
    }

    // then we sort them
    ArraySortFloats(sorted_percentages);

    for (i = 0; i < percentages.Size(); i += 1) {
      NLOG("sort positive, value" + sorted_percentages[i]);
    }

    sorted_size = sorted_percentages.Size();

    for (i = 0; i < percentages.Size(); i += 1) {
      for (j = sorted_size; j >= 0; j -= 1) {
        if (percentages[j].percentage == sorted_percentages[i] && percentages[j].type != CreatureNONE) {
          output.PushBack(percentages[j]);

          percentages[j].type = CreatureNONE;
        }
      }
    }

    for (i = 0; i < output.Size(); i += 1) {
      NLOG("sort ascending, value" + output[i].type + " " + output[i].percentage);
    }

    return output;
  }

  function getEcosystemAdvice(main_creature_type: CreatureType): string {
    var advice: string;
    var addition_advice: string;
    var advice_creature_names: string;
    var creatures: array<CreatureType>;
    var i: int;

    advice = GetLocStringByKey("rer_ecosystem_advice");
    advice = StrReplace(advice, "{{creature_name}}", getCreatureNameFromCreatureType(parent.ecosystem_manager.master.bestiary, main_creature_type));

    // first we list the creatures who helped the community form in the area
    creatures = parent.ecosystem_manager.getCommunityReasonsToExist(main_creature_type);
    advice_creature_names = "";
    for (i = 0; i < creatures.Size(); i += 1) {
      // we stop after three creatures
      if (i == 3) {
        break;
      }

      // if it's the last creature in the list we add "and"
      if (i == creatures.Size() - 1 || i == 2) {
        advice_creature_names += ", " + GetLocStringByKey("rer_and") + " ";
      }
      else if (i > 0) {
        advice_creature_names += ", ";
      }

      advice_creature_names += getCreatureNameFromCreatureType(
        parent.ecosystem_manager.master.bestiary,
        creatures[i]
      );
    }

    advice = StrReplace(advice, "{{advice_creature_names}}", advice_creature_names);
    
    creatures = parent.ecosystem_manager.getCommunityGoodInfluences(main_creature_type);
    advice_creature_names = "";
    for (i = 0; i < creatures.Size(); i += 1) {
      if (i == 3) {
        break;
      }
      
      if (i == creatures.Size() - 1 || i == 2) {
        advice_creature_names += ", " + GetLocStringByKey("rer_and") + " ";
      }
      else if (i > 0) {
        advice_creature_names += ", ";
      }

      advice_creature_names += getCreatureNameFromCreatureType(
        parent.ecosystem_manager.master.bestiary,
        creatures[i]
      );
    }

    advice = StrReplace(advice, "{{other_creature_names}}", advice_creature_names);
    creatures = parent.ecosystem_manager.getCommunityBadInfluences(main_creature_type);

    if (creatures.Size() > 0) {
      addition_advice = GetLocStringByKey("rer_ecosystem_addition_advice");
      addition_advice = StrReplace(addition_advice, "{{creature_name}}", getCreatureNameFromCreatureType(parent.ecosystem_manager.master.bestiary, main_creature_type));
      creatures = parent.ecosystem_manager.getCommunityBadInfluences(main_creature_type);
      advice_creature_names = "";

      for (i = 0; i<creatures.Size(); i += 1) {
        if (i == 3) {
          break;
        }

        // if it's the last creature in the list we add "and"
        if (i == creatures.Size() - 1 || i == 2) {
          if (creatures.Size() > 2) {
            advice_creature_names += ",";
          }

          advice_creature_names += " "+GetLocStringByKey("rer_and")+" ";
        }
        else if (i > 0) {
          advice_creature_names += ", ";
        }
        
        advice_creature_names += getCreatureNameFromCreatureType(parent.ecosystem_manager.master.bestiary, creatures[i]);
      }

      addition_advice = StrReplace(addition_advice, "{{advice_creature_names}}", advice_creature_names);
      advice += addition_advice;
    }

    return advice;
  }

  function getMessageAboutEcosystemDelayMultiplier(): string {
    var rate: float;
    var rate_parent: string;
    var message: string;

    parent.ecosystem_manager.master.refreshEcosystemFrequencyMultiplier();
    rate = 100 * parent.ecosystem_manager.master.ecosystem_frequency_multiplier;
    rate_parent = "" + RoundF(rate) + "%";
    message = StrReplace(GetLocStringByKey("rer_ecosystem_delay_multiplier"), "{{rate_parent}}", rate_parent);

    return message;
  }
}

struct RER_SurroundingCreaturePercentage {
  var type: CreatureType;
  var percentage: float;
}

function newSurroundingCreaturePercentage(type: CreatureType, percentage: float): RER_SurroundingCreaturePercentage {
  var output: RER_SurroundingCreaturePercentage;

  output.type = type;
  output.percentage = percentage;

  return output;
}