
// File containing helper functions used for creatures levels.
// It uses values from the settings to calculate their levels.
//

enum RER_LevelScaling {
  RER_LevelScaling_Automatic = 0,
  RER_LevelScaling_Level = 1,
  RER_LevelScaling_Playtime = 2,
}

function getRandomLevelBasedOnSettings(settings: RE_Settings): int {
  var player_level: int;
  var max_level_allowed: int;
  var min_level_allowed: int;
  var level: int;

  player_level = RER_getPlayerLevel();

  // if for some reason the user set the max lower than the min value
  if (settings.max_level_allowed >= settings.min_level_allowed) {
    max_level_allowed = settings.max_level_allowed;
    min_level_allowed = settings.min_level_allowed;
  }
  else {
    max_level_allowed = settings.min_level_allowed;
    min_level_allowed = settings.max_level_allowed;
  }

  level = RandRange(player_level + max_level_allowed, player_level + min_level_allowed);

  NLOG("random creature level = " + level);

  return Max(level, 1);
}

function RER_getPlayerLevel(): int {
  if (RER_playerUsesEnhancedEditionRedux() || RER_getPlayerScaling() == RER_LevelScaling_Playtime) {
    // every 3 hours of gameplay is equal to 1 level in vanilla
    return Min(300, GameTimeHours(theGame.CalculateTimePlayed())) / 3;
  }

  return thePlayer.GetLevel();
}

function RER_getPlayerScaling(): RER_LevelScaling {
  return StringToInt(
    theGame.GetInGameConfigWrapper()
      .GetVarValue('RERmain', 'RERlevelScaling')
  );
}

function RER_detectAbnormalLevelChanges() {
  // automatically adjust setting if it's on Automatic
  if (RER_getPlayerScaling() != RER_LevelScaling_Automatic) {
    return;
  }

  if (!RER_hasPlayerLevelChangedAbnormally()) {
    return;
  }

  NTUTO(
    GetLocStringByKey('option_rer_level_scaling'),
    GetLocStringByKey('rer_level_scaling_no_level_detected')
  );
}

function RER_hasPlayerLevelChangedAbnormally(): bool {
  var previous_level: int = RER_getPlayerLevelFactValue();
  var current_level: int = thePlayer.GetLevel();

  RER_setPlayerLevelFactValue(current_level);
  if (previous_level <= 0) {
    return false;
  }

  // normal levels should never go down
  if (current_level < previous_level) {
    return true;
  }

  // more than two levels of difference, especially since this function should
  // run every 30 seconds or so.
  return current_level - previous_level >= 2;
}