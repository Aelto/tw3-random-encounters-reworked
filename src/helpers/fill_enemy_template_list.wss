
/**
 * NOTE: it makes a copy of the list
 **/
latent function fillEnemyTemplateList(
  enemy_template_list: EnemyTemplateList,
  total_number_of_enemies: int,
  seed: int,
  optional use_bestiary: bool
): EnemyTemplateList {
  var template_list: EnemyTemplateList;
  var selected_template_to_increment: int;
  var max_tries: int;
  var i: int;
  var manager : CWitcherJournalManager;
  var can_spawn_creature: bool;

  template_list = copyEnemyTemplateList(enemy_template_list);

  max_tries = 0;

  for (i = 0; i < template_list.templates.Size(); i += 1) {
    if (template_list.templates[i].max == 0) {
      max_tries = total_number_of_enemies * 2;

      break;
    }

    max_tries += template_list.templates[i].max;
  }

  NLOG("maximum number of tries: " + max_tries + " use bestiary = " + use_bestiary);

  if (use_bestiary) {
    manager = theGame.GetJournalManager();

    // we multiply the max tries number by two
    // because it can be hard to find a lonely entry in a list
    max_tries *= 2;
  }


  while (total_number_of_enemies > 0 && max_tries > 0) {
    max_tries -= 1;

    selected_template_to_increment = RandNoiseF(
      seed + total_number_of_enemies + max_tries,
      template_list.templates.Size()
    ) as int;

    NLOG("selected template: " + selected_template_to_increment);

    if (template_list.templates[selected_template_to_increment].max > 0
      && template_list.templates[selected_template_to_increment].count >= template_list.templates[selected_template_to_increment].max) {
      continue;
    }

    // when use_bestiary is true, we only take known bestiary entries
    // ignore all unknown entries.
    
    if (use_bestiary) {
      can_spawn_creature = bestiaryCanSpawnEnemyTemplate(template_list.templates[selected_template_to_increment], manager);

      if (!can_spawn_creature) {
        continue;
      }
    }

    NLOG("template " + selected_template_to_increment + " +1");

    template_list.templates[selected_template_to_increment].count += 1;

    total_number_of_enemies -= 1;
  }

  return template_list;
}
