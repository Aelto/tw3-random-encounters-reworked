
struct RER_TrailMakerTrack {
  var template: CEntityTemplate;
  var monster_clue_type: name;

  // some track templates need a higher trail ratio
  // so when you add a track with a multiplier greater than 1
  // the TrailMaker trail ratio will increased to accomodate.
  // the TrailMaker uses the highest trail_ratio_multiplier among
  // its track lists.
  var trail_ratio_multiplier: float;
  default trail_ratio_multiplier = 1;
}

// the trail maker is class used to create trails of blood or tracks on the
// ground. It handles cases where you must draw a trail from point A to point B,
// or simple cases where you only need one track at a specific location.
//
// It has optimizations where it can draw only 25% of the asked tracks to keep
// performances when drawing GPU heavy trails with fogs. This using a ratio
// where we can say only draw 0.25 or 0.50, etc...
class RER_TrailMaker {

  // tells how many are skipped when drawing a trail. If it is set at `1` then
  // it will draw every track, if set at `2` it will draw every 2 tracks.
  private var trail_ratio: int;
  default trail_ratio = 1;

  private var trail_ratio_index: int;
  default trail_ratio_index = 1;

  public function setTrailRatio(ratio: int) {
    var ratio_multiplier: float = RER_performanceModeEither::<float>(1.0, 2.0);

    this.trail_ratio = RoundF(
      ratio * this.getHighestTrailRatioMultiplier() * ratio_multiplier
    );
    this.trail_ratio_index = 1;
  }

  // loops through the tracks and find the highest trail ratio multiplier
  private function getHighestTrailRatioMultiplier(): float {
    var i: int;
    var highest_multiplier: float;

    highest_multiplier = 0;

    for (i = 0; i < this.track_resources.Size(); i += 1) {
      if (this.track_resources[i].trail_ratio_multiplier > highest_multiplier) {
        highest_multiplier = this.track_resources[i].trail_ratio_multiplier;
      }
    }

    return highest_multiplier;
  }

  // an array containing entities for the tracks when
  // using the functions to add a track on the ground
  // it adds one to the array, unless we reached the maximum
  // number of tracks. At this moment we come back to 0 and
  // start using the tracks_index and set tracks_looped  
  // to true to tell we have already reached the maximum once.
  // And now instead of creating a new track Entity we simply
  // move the old one at tracks_index.
  private var tracks_entities: array<RER_MonsterClue>;
  private var tracks_index: int;
  private var tracks_looped: bool;
  default tracks_looped = false;
  
  private var tracks_maximum: int;
  default tracks_maximum = 200;

  public function setTracksMaximum(maximum: int) {
    this.tracks_maximum = RER_performanceModeEither::<int>(maximum, 100);
  }

  private var track_resources: array<RER_TrailMakerTrack>;
  private var track_resources_size: int;

  public function setTrackResources(resources: array<RER_TrailMakerTrack>) {
    this.track_resources.Clear();
    this.track_resources = resources;
    this.track_resources_size = this.track_resources.Size();
  }

  private function getRandomTrackResource(): RER_TrailMakerTrack {
    if (track_resources_size == 1) {
      return this.track_resources[0];
    }

    return this.track_resources[RandRange(this.track_resources_size)];
  }

  public function init(ratio: int, maximum: int, resources: array<RER_TrailMakerTrack>) {
    #ifdef ENABLE_TRAIL_MAKER {
      this.setTrackResources(resources);
      this.setTracksMaximum(maximum);
      this.setTrailRatio(ratio);
    };
  }

  private var last_track_position: Vector;

  // the boolean value that is returned by the function indicates if a track was
  // placed or if it was skipped due to the ratio setting.
  public function addTrackHere(position: Vector, optional heading: EulerAngles): bool {
    var new_entity: RER_MonsterClue;
    var track_resource: RER_TrailMakerTrack;

    #ifndef ENABLE_TRAIL_MAKER {
      return false;
    };

    if (VecDistanceSquared2D(position, this.last_track_position) < PowF(0.5 * this.trail_ratio, 2)) {
      return false;
    }

    this.last_track_position = position;

    if (trail_ratio_index < trail_ratio) {
      trail_ratio_index += 1;

      return false;
    }

    trail_ratio_index = 1;

    if (!this.tracks_looped) {
      track_resource = this.getRandomTrackResource();

      new_entity = theGame.CreateEntity(
        track_resource.template,
        position,
        heading
      ) as RER_MonsterClue;

      new_entity.voiceline_type = track_resource.monster_clue_type;

      this.tracks_entities.PushBack(new_entity);

      if (this.tracks_entities.Size() == this.tracks_maximum) {
        this.tracks_looped = true;

        // because the recycling process starts first by doing `tracks_index + 1`
        // it is by default set at -1 so the first track it starts recycling is
        // the track at index 0.
        this.tracks_index = -1;
      }

      return true;
    }

    this.tracks_index = (this.tracks_index + 1) % this.tracks_maximum;

    this.tracks_entities[this.tracks_index]
      .TeleportWithRotation(position, heading);

    return true;
  }

  public function getLastPlacedTrack(): RER_MonsterClue {
    if (this.tracks_looped && this.tracks_index >= 0) {
      return this.tracks_entities[this.tracks_index];
    }
    
    return this.tracks_entities[this.tracks_entities.Size() - 1];
  }

  // `use_failsage` stops the trail if it drew more than `this.tracks_maximum`
  // tracks. It can be useful if the trail is too long, to avoid a crash
  public latent function drawTrail(
    from: Vector,
    to: Vector,
    destination_radius: float,

    /* set both trails_details parameters or none at all */
    optional trail_details_maker: RER_TrailDetailsMaker,
    optional trail_details_chances: float,

    optional use_failsafe: bool,
    optional use_pathfinding: bool) {

    var total_distance_to_final_point: float;
    var current_track_position: Vector;
    var current_track_translation: Vector;
    var distance_to_final_point: float;
    var final_point_radius: float;
    var number_of_tracks_created: int;
    var distance_left: float; // it's a % going from 100% to 0%
    var volume_path_manager: CVolumePathManager;
    var i: int;

    #ifndef ENABLE_TRAIL_MAKER {
      return;
    };

    number_of_tracks_created = 0;
    final_point_radius = destination_radius * destination_radius;
    current_track_position = from;

    total_distance_to_final_point = VecDistanceSquared2D(from, to);
    distance_to_final_point = total_distance_to_final_point;

    if (use_pathfinding) {
      volume_path_manager = theGame.GetVolumePathManager();
    }

    NLOG("TrailMaker, drawing trail, with ratio = " + this.trail_ratio);

    do {
      // 50 / 100 = 0.5
      // it's a % going from 100% to 0% as we get closer
      distance_left = 1 - (total_distance_to_final_point - distance_to_final_point) / total_distance_to_final_point;

      current_track_translation = VecConeRand(
        VecHeading(to - current_track_position),

        // the closer we get to the final point, the smaller the degrees randomness is
        40 + 50 * distance_left, 

        // the closer we get to the final point, the smaller the distance between
        // tracks is.
        0.5 + distance_left * 0.5,
        1 + 1 * distance_left
      );

      if (use_pathfinding && volume_path_manager.IsPathfindingNeeded(current_track_position, to)) {
        current_track_position = volume_path_manager.GetPointAlongPath(
          current_track_position,
          current_track_position + current_track_translation,
          2
          // 1 + 1 * distance_left
        );

        // NLOG(" P - tracks position = " + VecToString(current_track_position) + " destination = " + VecToString(to));
      }
      else {
        current_track_position += current_track_translation;
      }


      FixZAxis(current_track_position);

      if (this.addTrackHere(
        current_track_position,
        VecToRotation(to - current_track_position)
      )) {
        number_of_tracks_created += 1;

        if (use_failsafe && number_of_tracks_created >= this.tracks_maximum) {
          break;
        }
      }

      distance_to_final_point = VecDistanceSquared2D(current_track_position, to);

      // small chance to add a corpse near the tracks
      if (trail_details_chances > 0 && RandRange(100) < trail_details_chances) {
        trail_details_maker.placeDetailsHere(current_track_position);
      }

      SleepOneFrame();
    } while (distance_to_final_point > final_point_radius);
  }

  public function hidePreviousTracks() {
    var i: int;
    var max: int;
    var where: Vector;

    max = this.tracks_entities.Size();
    where = thePlayer.GetWorldPosition() + VecRingRand(1000, 2000);

    for (i = 0; i < max; i += 1) {
      this.tracks_entities[i].Teleport(where);
    }
  }

  public function clean() {
    var i: int;
    
    for (i = 0; i < this.tracks_entities.Size(); i += 1) {
      this.tracks_entities[i].Destroy();
    }

    this.tracks_entities.Clear();
  }

  /**
   * set it to true if you don't want the class to clean all tracks when it's
   * destroyed. Especially useful if you create a temporary TrailMaker just
   * to quickly draw trails
   */
  var dont_clean_on_destroy: bool;

  event OnDestroyed() {
    if (!this.dont_clean_on_destroy) {
      this.clean();
    }
  }

}

// the `TrailDetailsMaker` is a class used by the `TrailMaker` class when
// drawing a trail. It is an abstract class with only one method:
//  ```
//    placeDetailsHere(position: Vector)
//  ```
// when drawing a trail there is a chance we add small details among the tracks
// such as corpses, blood around the tracks, a creature, etc... This is what
//  this class is for.
//
// So how should we use it? We create a new class that extends this one and we
// override the method(s). Then when we use the `TrailMaker::drawTrail` we pass
// this new class we just created and that's it.
abstract class RER_TrailDetailsMaker {
  
  // override it
  public latent function placeDetailsHere(position: Vector) {}

}


class RER_CorpseAndBloodTrailDetailsMaker extends RER_TrailDetailsMaker {
  
  // because it creates corpses and blood spills, we must set these to members
  // before using this DetailsMaker
  public var corpse_maker: RER_TrailMaker;
  public var blood_maker: RER_TrailMaker;

  public latent function placeDetailsHere(position: Vector) {
    var number_of_blood_spills: int;
    var current_clue_position: Vector;
    var i: int;

    current_clue_position = position;

    FixZAxis(current_clue_position);

    this
      .corpse_maker
      .addTrackHere(current_clue_position, VecToRotation(VecRingRand(1, 2)));

    number_of_blood_spills = RandRange(10, 5);

    for (i = 0; i < number_of_blood_spills; i += 1) {
      current_clue_position = position + VecRingRand(0, 1.5);

      FixZAxis(current_clue_position);

      this
        .blood_maker
        .addTrackHere(current_clue_position, VecToRotation(VecRingRand(1, 2)));
    }
  }

}