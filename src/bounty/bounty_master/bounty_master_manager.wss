
statemachine class RER_BountyMasterManager {
  var bounty_manager: RER_BountyManager;
  var picked_seed: int;

  public latent function init(bounty_manager: RER_BountyManager) {
    this.bounty_manager = bounty_manager;
    this.trySpawnBountyMasters();
    this.GotoState('Waiting');
  }
  
  public function bountySeedSelected(seed: int) {
    this.picked_seed = seed;

    this.GotoState('CreateBounty');
  }

  //////////////////////////////////////////////////////////////////////////////
  // spawning logic
  private var entities: array<CEntity>;
  private var oneliners: array<RER_OnelinerEntity>;

  public latent function trySpawnBountyMasters() {
    if (!RER_modPowerIsBountySystemEnabled(this.bounty_manager.master.getModPower())) {
      return;
    }

    this.removeBountyMasterPinsAndMarkers();

    var max: int = this.getBountyMastersCount();
    var i: int;

    for (i = this.countOccupiedPositions(); i < max; i += 1) {
      this.trySpawnOneBountyMaster(i);
    }
  }

  private function getBountyMastersCount(): int {
    var region: string = SUH_getCurrentRegion();

    if (region == "no_mans_land") {
      return 3;
    }
    else if (region == "skellige") {
      return 3;
    }
    else if (region == "bob") {
      return 2;
    }
    else if (region == "prolog_village") {
      return 1;
    }
    else if (region == "kaer_morhen") {
      return 1;
    }
    else {
      return 2;
    }
  }

  private function getSpawningSeed(): int {
    return GameTimeHours(theGame.CalculateTimePlayed());
  }

  private latent function trySpawnOneBountyMaster(index: int) {
    var position: Vector = this.getBountyMasterPosition(index);
    if (FloorF(position.X) == 0 && FloorF(position.Y) == 0) {
      // invalid position
      return;
    }

    var template_path: string = this.getBountyMasterTemplatePath();
    if (template_path == "") {
      // invalid template path
      return;
    }

    var template: CEntityTemplate = LoadResourceAsync(template_path, true) as CEntityTemplate;

    var entity: CEntity = theGame.CreateEntity(
      template,
      position + Vector(0,0, 0.1),
      thePlayer.GetWorldRotation()
    ) as CEntity;

    entity.AddTag('RER_bounty_master');
    this.entities.PushBack(entity);
    this.setupBountyMasterPinsAndMarkers(entity);

    var interaction: RER_StartBountyMasterConversationOnInteraction;
    interaction = new RER_StartBountyMasterConversationOnInteraction in entity;
    (entity as CNewNPC).addInteractionEventListener(interaction);
  }

  private function getBountyMasterTemplatePath(): string {
    var current_region: string = SUH_getCurrentRegion();

    //CONTRIBUTION: Ferroxius - New Bounty Masters
    if (current_region == "no_mans_land") {
      return "gameplay\community\community_npcs\prologue\regular\temerian_merchant.w2ent";
    }
    else if (current_region == "skellige") {
      return "gameplay\community\community_npcs\skellige\regular\skellige_merchant.w2ent";
    }
    else if (current_region == "bob") {
      return "dlc\bob\data\gameplay\community\community_npcs\craftsmen\merchant.w2ent";
    }
    else if (current_region == "prolog_village") {
      return "gameplay\community\community_npcs\prologue\regular\nilfgaardian_noble.w2ent";
    }
    
    // kaer morhen, or any custom world
    return "dlc\ep1\community\community_npcs\gustfields_hunter.w2ent";
  }

  private function setupBountyMasterPinsAndMarkers(entity: CEntity) {
    if (RER_menuBool('RERoptionalFeatures', 'RERonelinersBountyMaster')) {
      var map_pin: SU_MapPin = new SU_MapPin in thePlayer;
      map_pin.tag = "RER_bounty_master";
      map_pin.pin_tag = 'RER_bounty_master';
      map_pin.position = entity.GetWorldPosition();
      map_pin.description = GetLocStringByKey("rer_mappin_bounty_master_description");
      map_pin.label = GetLocStringByKey("rer_mappin_bounty_master_title");
      map_pin.type = "QuestAvailableBaW";
      map_pin.filtered_type = "QuestAvailableBaW";
      map_pin.radius = 10;
      map_pin.region = SUH_getCurrentRegion();
      map_pin.is_fast_travel = true;
      map_pin.appears_on_minimap = RER_menu('RERoptionalFeatures', 'RERminimapMarkerBountyMaster');

      SUMP_addCustomPin(map_pin);
    }


    if (RER_menuBool('RERoptionalFeatures', 'RERonelinersBountyMaster')) {
      var bounty_master: string = GetLocStringByKey("rer_mappin_bounty_master_title");  

      var oneliner: RER_OnelinerEntity = RER_onelinerEntity(
        "<img src='img://icons/quests/treasurehunt.png' vspace='-24' /> " + bounty_master,
        entity
      );

      this.oneliners.PushBack(oneliner);
    }

    SU_updateMinimapPins();
  }

  private function removeBountyMasterPinsAndMarkers() {
    SU_removeCustomPinByTag("RER_bounty_master");

    for oneliner: RER_OnelinerEntity in this.oneliners {
      oneliner.unregister();
    }
    this.oneliners.Clear();
  }

  //////////////////////////////////////////////////////////////////////////////
  // positions logic
  private var occupied_positions: array<Vector>;

  private function setPositionOccupied(position: Vector) {
    this.occupied_positions.PushBack(position);
  }

  private function isPositionOccupied(position: Vector): bool {
    return this.occupied_positions.Contains(position);
  }

  private function countOccupiedPositions(): int {
    return this.occupied_positions.Size();
  }

  private function clearOccupiedPositions() {
    this.occupied_positions.Clear();
  }

  public function getBountyMasterPosition(index: int): Vector {
    var positions: array<Vector> = this.getBountyMasterValidPositions();

    var seed: int = this.getSpawningSeed();
    var position_index: int = FloorF(RandNoiseF(seed + index, positions.Size()));

    var position: Vector = positions[position_index];

    return position;
  }

  private function getBountyMasterValidPositions(
    optional ignore_occupied_positions: bool
  ): array<Vector> {
    var area: EAreaName;
    var area_string: string;
    var output: array<Vector>;

    area = theGame.GetCommonMapManager().GetCurrentArea();

    switch (area) {
      case AN_Prologue_Village:
      case AN_Prologue_Village_Winter:
        // Nilfgaardian garrison
        output.PushBack(Vector(-371.5, 372.5, 1.9));

        // Ransacked village
        output.PushBack(Vector(491.3, -64.7, 8.9));

        // Woeson Bridge - white orchard blacksmith
        output.PushBack(Vector(11.5, -24.9, 2.3));
        
        break;

      case AN_Skellige_ArdSkellig:
        // Holmstein port
        output.PushBack(Vector(-297.9, -1049, 6));

        // Holmstein port
        output.PushBack(Vector(-36, 613.5, 2));

        // Urialla harbor
        output.PushBack(Vector(1488, 1907, 4.7));
        // Blandare
        output.PushBack(Vector(696.16,-8.08,49.73));
        // Whaleyard
        output.PushBack(Vector(1213.13,420.31,2.23));
        // An Skellig Harbor
        output.PushBack(Vector(1481.60,1869.72,0.06));
        // Larvik village
        output.PushBack(Vector(2804.80,69.60,28.99));
        // Fyresdal village
        output.PushBack(Vector(386.03,-625.42,7.77));
        // Village near Fyke isle
        output.PushBack(Vector(200.42,-466.53,1.37));
        break;

      case AN_Kaer_Morhen:
        // Crows perch
        output.PushBack(Vector(-91, -22.8, 146));
        break;

      case AN_NMLandNovigrad:
      case AN_Velen:
        // Blackbough
        output.PushBack(Vector(-186, 187, 7.6));

        // Crows perch
        output.PushBack(Vector(175, 7, 13.8));

        // Nilfgaardian camp
        output.PushBack(Vector(2321, -881, 16.1));

        // Novigrad - gregory bridge
        output.PushBack(Vector(691, 2025, 33.4));

        // Novigrad - portside gate
        output.PushBack(Vector(543, 1669, 4.12));

        // Novigrad - rosemary and thyme
        output.PushBack(Vector(707.6, 1751.2, 4.3));

        // Oxenfurt - novigrad gate
        output.PushBack(Vector(1758, 1049, 6.8));

        // Oxenfurt - western gate
        output.PushBack(Vector(1714.3, 918, 14));

        // Upper mill
          output.PushBack(Vector(2497, 2497, 2.8));
        // Velen - Nilfgardian camp
        output.PushBack(Vector(2298.48,-857.35,18.08));
        // Velen - Midcopse village
        output.PushBack(Vector(-333.23,-228.77,7.51));
        // Velen - Crossroads inn
        output.PushBack(Vector(500.23,551.90,11.20));
        // Novigrad - Alness village
        output.PushBack(Vector(1548.35,1839.41,6.23));
        break;

      default:
        area_string = AreaTypeToName(theGame.GetCommonMapManager().GetCurrentArea());

        if (area_string == "bob") {
          // Beauclair port
          output.PushBack(Vector(-229, -1184, 3.7));

          // Castel vineyard
          output.PushBack(Vector(-745, -321, 29.4));

          // Cockatrice inn
          output.PushBack(Vector(-148.6, -635.4, 11.4));

          // Tourney grounds
          output.PushBack(Vector(-490.4, -954.3, 61.2));
          // Francollarts village
          output.PushBack(Vector(68.36,-1705.32,33.76));
          // Coronate vineyard
          output.PushBack(Vector(-287.40,-14.13,17.47));
        }
        else {
          // the real default
        }

        break;
    }

    if (!ignore_occupied_positions) {
      this.removeOccupiedPositions(output);
    }

    return output;
  }

  private function removeOccupiedPositions(out positions: array<Vector>) {
    for position: Vector in this.occupied_positions {
      positions.Remove(position);
    }
  }
}
