state Waiting in RER_BountyMasterManager {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    NLOG("RER_BountyMasterManager - Waiting");
  }
}

class RER_StartBountyMasterConversationOnInteraction extends SU_InteractionEventListener {

  default tag = "RER_StartBountyMasterConversationOnInteraction";

  public function run(actionName : string, activator : CEntity, receptor: CPeristentEntity): bool {
    var rer: CRandomEncounters;

    if (!getRandomEncounters(rer)) {
      NDEBUG("An error occured, could not find the RER entity in the world");

      return false;
    }

    if (rer.bounty_manager.bounty_master_manager.GetCurrentStateName() == 'Waiting') {
      rer.bounty_manager.bounty_master_manager.GotoState('DialogChoice');
      this.doMovementAdjustment(receptor);
    }

    /**
     * We still want the dialogue to play after the interaction, so we'll return
     * true no matter what.
     */
    return true;
  }

  function doMovementAdjustment(receptor: CPeristentEntity) {
    var movement_adjustor: CMovementAdjustor;
    var slide_ticket: SMovementAdjustmentRequestTicket;
    var target: CActor;

    target = thePlayer;

    movement_adjustor = (receptor as CActor)
      .GetMovingAgentComponent()
      .GetMovementAdjustor();

    slide_ticket = movement_adjustor.GetRequest( 'RotateTowardsPlayer' );

    // cancel any adjustement made with the same name
    movement_adjustor.CancelByName( 'RotateTowardsPlayer' );

    // and now we create a new request
    slide_ticket = movement_adjustor.CreateNewRequest( 'RotateTowardsPlayer' );

    movement_adjustor.AdjustmentDuration(
      slide_ticket,
      0.25 // 500ms
    );

    movement_adjustor.RotateTowards(
      slide_ticket,
      target
    );
  }
}