

statemachine class RER_ContractManager {
  var master: CRandomEncounters;

  function init(_master: CRandomEncounters) {
    this.master = _master;

    this.GotoState('Waiting');
  }

  public function pickedContractNoticeFromNoticeboard(errand_name: string) {
    this.GotoState('DialogChoice');
  }

  //////////////////////////////////////////////////////////////////////////////
  // utility functions:

  public function getNearbyNoticeboard(): W3NoticeBoard {
    var entities: array<CGameplayEntity>;
    var board: W3NoticeBoard;
    var i: int;

    FindGameplayEntitiesInRange(
      entities,
      thePlayer,
      20, // range, 
      1, // max results
      , // tag: optional value
      FLAG_ExcludePlayer,
      , // optional value
      'W3NoticeBoard'
    );

    // bold move here, if there are no noticeboard nearby the game will crash.
    board = entities[0] as W3NoticeBoard;

    return board;
  }

  public function getMaximumContractCount(): int {
    return 2 + Min(this.getMaximumDifficulty() / 30, 8);
  }

  //////////////////////////////////////////////////////////////////////////////
  // contract workflow:

  public function startContract(factory: RER_ContractSeedFactory) {
    var contract: RER_Contract = (new RER_Contract in this).init(factory);

    this.master.storages.contract.has_ongoing_contract = true;
    this.master.storages.contract.active_contract = factory;

    this.master.storages.contract.killed_targets.Clear();
    var species: array<CreatureType> = contract.speciesList();
    for c: CreatureType in species {
      this.master.storages.contract.killed_targets.PushBack(false);
    }

    this.master.storages.contract.save();
    this.GotoState('Waiting');
  }

  public function hasOngoingContract(): bool {
    return this.master.storages.contract.has_ongoing_contract;
  }

  public function endOngoingContract() {
    this.master.storages.contract.has_ongoing_contract = false;
    this.master.storages.contract.save();
  }

  public function getOngoingContractFactory(): RER_ContractSeedFactory {
    return this.master.storages.contract.active_contract;
  }
  
  public function isTargetKilled(index: int): bool {
    if (index >= this.master.storages.contract.killed_targets.Size()) {
      return false;
    }

    return this.master.storages.contract.killed_targets[index];
  }

  public function setTargetKilled(index: int) {
    this.master.storages.contract.killed_targets[index] = true;
    this.master.storages.contract.save();
  }

  public function areAllTargetsKilled(): bool {
    for killed: bool in this.master.storages.contract.killed_targets {
      if (!killed) {
        return false;
      }
    }

    return true;
  }

  public function clearContractStorage() {
    this.master.storages.contract.completed_contracts.Clear();
    this.master.storages.contract.has_ongoing_contract = false;
    this.master.storages.contract.killed_targets.Clear();
    this.master.storages.contract.save();
  }

  public function completeOngoingContract() {
    if (!this.hasOngoingContract()) {
      return;
    }

    var contract: RER_Contract = (new RER_Contract in this)
      .init(this.getOngoingContractFactory());

    NLOG("completeOngoingContract(), seed = " + contract.seed);
    var rewards: RER_ContractRewards = contract.calculateRewards();

    NLOG("completeOngoingContract(), total_crowns_amount = " + rewards.crowns);
    NLOG("completeOngoingContract(), total_reputation_points = " + rewards.reputation);

    if (rewards.crowns > 0) {
      thePlayer.AddMoney(rewards.crowns as int);
      thePlayer.DisplayItemRewardNotification('Crowns', rewards.crowns as int);
      theSound.SoundEvent("gui_inventory_buy");
    }

    RER_addContractReputationFactValue(RoundF(rewards.reputation));
    contract.onCompletion();
    thePlayer.DisplayHudMessage(GetLocStringByKeyExt("rer_contract_finished"));

    this.endOngoingContract();
  }

  //////////////////////////////////////////////////////////////////////////////
  // difficulty logic:

  public function getMaximumDifficulty(): int {
    return RER_getContractReputationFactValue() * 1 + 1;
  }

  public function setPreferredDifficuty(difficulty: int) {
    // setting the value to either the max or the min resets it
    if (difficulty <= 0 || difficulty == this.getMaximumDifficulty()) {
      RER_removeContractPreferredDifficultyFact();
    }
    else {
      RER_setContractPreferredDifficultyFactValue(difficulty);
    }
  }

  private function getPreferredDifficulty(): int {
    var prefered: int = RER_getContractPreferredDifficultyFactValue();
    var difficulty: int = this.getMaximumDifficulty();

    if (prefered <= 0 || prefered > difficulty) {
      return difficulty;
    }

    return prefered;
  }

  public function getSelectedDifficulty(): int {
    var difficulty: int = this.getPreferredDifficulty();

    return difficulty;
  }

  public function contractHagglePreferredDifficultySelected(difficulty: int) {
    this.setPreferredDifficuty(difficulty);
    this.GotoState('DialogChoice');
  }
}
