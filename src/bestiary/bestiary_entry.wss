
abstract class RER_BestiaryEntry {
  var type: CreatureType;
  var species: RER_SpeciesTypes;

  var template_list: EnemyTemplateList;

  // stores a hash of the templates the bestiary entry has for a faster lookup.
  // Used by the function `isCreatureHashedNameFromEntry()`
  var template_hashes: array<string>;

  // names for this entity trophies
  // uses the enum TrophyVariant as index
  var trophy_names: array<name>;

  // the name used in the mod menus
  var menu_name: name;
  
  var localized_name: name;

  var ecosystem_impact: EcosystemCreatureImpact;

  // controls how myuch 1 of this type killed affects the delays, the value is
  // expressed in %.
  var ecosystem_delay_multiplier: float;

  // both use the enum EncounterType as index
  var chances_day: array<int>;
  var chances_night: array<int>;

  // the custom multiplier the user set for this specific creature type. By default
  // it's set at 1.
  var creature_type_multiplier: float;
  default creature_type_multiplier = 1;

  var trophy_chance: float;

  var crowns_percentage: float;

  var region_constraint: RER_RegionConstraint;

  var city_spawn: bool;

  var possible_compositions: array<CreatureType>;

  public function init() {}

  public function setCreaturePreferences(preferences: RER_CreaturePreferences, encounter_type: EncounterType): RER_CreaturePreferences {
    return preferences
      .setCreatureType(this.type)
      .setChances(this.chances_day[encounter_type], this.chances_night[encounter_type])
      .setCitySpawnAllowed(this.city_spawn)
      .setRegionConstraint(this.region_constraint);
  }

  public function loadSettings(inGameConfigWrapper: CInGameConfigWrapper) {
    var i: int;

    this.city_spawn = inGameConfigWrapper.GetVarValue('RERencountersSettlement', this.menu_name);
    this.trophy_chance = StringToInt(inGameConfigWrapper.GetVarValue('RERmonsterTrophies', this.menu_name));
    this.region_constraint = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersConstraints', this.menu_name));

    this.chances_day.Clear();
    this.chances_night.Clear();

    for (i = 0; i < EncounterType_MAX; i += 1) {
      this.chances_day.PushBack(0);
      this.chances_night.PushBack(0);
    }

    this.chances_day[EncounterType_DEFAULT] = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersAmbushDay', this.menu_name));
    this.chances_night[EncounterType_DEFAULT] = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersAmbushNight', this.menu_name));
    this.chances_day[EncounterType_HUNT] = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersHuntDay', this.menu_name));
    this.chances_night[EncounterType_HUNT] = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersHuntNight', this.menu_name));

    // special case for the contracts, they used to have a menu but don't anymore.
    // The contracts are now well balanced even for small creatures so the user
    // does not need to assign different ratios for each creatures
    this.chances_day[EncounterType_CONTRACT] = 1;
    this.chances_night[EncounterType_CONTRACT] = 1;

    this.chances_day[EncounterType_HUNTINGGROUND] = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersHuntingGroundDay', this.menu_name));
    this.chances_night[EncounterType_HUNTINGGROUND] = StringToInt(inGameConfigWrapper.GetVarValue('RERencountersHuntingGroundNight', this.menu_name));
    this.creature_type_multiplier = StringToFloat(inGameConfigWrapper.GetVarValue('RERcreatureTypeMultiplier', this.menu_name));
    this.crowns_percentage = StringToFloat(inGameConfigWrapper.GetVarValue('RERmonsterCrowns', this.menu_name)) / 100.0;

    for (i = 0; i < this.template_list.templates.Size(); i += 1) {
      this.template_hashes.PushBack(
        this.template_list.templates[i].template
      );
    }

    // NLOG("settings " + this.menu_name + " = " + this.city_spawn + " - " + this.trophy_chance + " " + this.chance_day + " " + this.region_constraint + " " );
  }

  public function isNull(): bool {
    return this.type == CreatureNONE;
  }

  public function getSpawnCount(master: CRandomEncounters): int {
    return rollDifficultyFactor(
      this.template_list.difficulty_factor,
      master.settings.selectedDifficulty,
      master.settings.enemy_count_multiplier * this.creature_type_multiplier
    );
  }

  public latent function spawn(
    master: CRandomEncounters,
    position: Vector,
    optional count: int,
    optional density: float,
    optional encounter_type: EncounterType,
    optional flags: RER_BestiaryEntrySpawnFlag,
    optional custom_tag: name,
    optional composition_count: int,
    optional damage_modifier: SU_BaseDamageModifier
  ): array<CEntity> {
    
    var creatures_templates: EnemyTemplateList;
    var group_positions: array<Vector>;
    var current_template: CEntityTemplate;
    var current_entity_template: SEnemyTemplate;
    var current_rotation: EulerAngles;
    var created_entity: CEntity;
    var created_entities: array<CEntity>;
    var group_positions_index: int;
    var tags_array: array<name>;
    var persistance: EPersistanceMode;
    var composition_type: CreatureType;
    var composition_entities: array<CEntity>;
    var npc: CNewNPC;
    var i: int;
    var j: int;

    // random scale applied to the creatures
		var scale: float;

    NLOG("BestiaryEntry, spawn() count = " + count + " " + this.type);


    if (RER_flagEnabled(flags, RER_BESF_NO_PERSIST)) {
      persistance = PM_DontPersist;
    }
    else {
      persistance = PM_Persist;
    }

    if (count == 0) {
      count = this.getSpawnCount(master);
    }

    if (density <= 0) {
      density = 0.01;
    }

    //set the flag automatically if the settings disable trophies for that
    // encounter type
    flags = RER_setFlag(
      flags,
      RER_BESF_NO_TROPHY,
      master.settings.trophies_enabled_by_encounter[encounter_type] == false
    );

    creatures_templates = fillEnemyTemplateList(
      this.template_list,
      count,
      master.settings.only_known_bestiary_creatures && !RER_flagEnabled(flags, RER_BESF_NO_BESTIARY_FEATURE)
    );

    group_positions = getGroupPositions(
      position,
      count,
      density
    );

    group_positions_index = 0;

    tags_array.PushBack('RandomEncountersReworked_Entity');

    if (IsNameValid(custom_tag)) {
      tags_array.PushBack(custom_tag);
    }

    // W3EE Redux compatibility, the mod has a perk to increase damage on contract
    // targets. It does so by cheking the tag of the creatures.
    if (encounter_type == EncounterType_CONTRACT) {
      tags_array.PushBack('ContractTarget');
      tags_array.PushBack('MonsterHuntTarget');
    }

    for (i = 0; i < creatures_templates.templates.Size(); i += 1) {
      current_entity_template = creatures_templates.templates[i];

      if (current_entity_template.count > 0) {
        current_template = LoadResourceAsync(current_entity_template.template, true) as CEntityTemplate;

        FixZAxis(group_positions[group_positions_index]);

        for (j = 0; j < current_entity_template.count; j += 1) {
          current_rotation = VecToRotation(VecRingRand(1, 2));
          created_entity = theGame.CreateEntity(
            current_template,
            group_positions[group_positions_index],
            current_rotation,,,,
            persistance,
            tags_array
          );

          // the scale is calculated based on the level of the creature. In the
          // formula we add +50 to both end so a level 4 creature when level
          // doesn't end up 400% bigger. It will also make the difference in height
          // more noticeable at lower levels.
          if (master.settings.dynamic_creatures_size) {
            scale = (getRandomLevelBasedOnSettings(master.settings) + 50.0)
                  / (RER_getPlayerLevel() + 50.0);

            NLOG("scale = " + scale);

            created_entity.GetRootAnimatedComponent().SetScale(Vector(scale, scale, scale, scale));
          }

          (created_entity as CNewNPC).SetLevel(
            getRandomLevelBasedOnSettings(master.settings)
          );

          if (!RER_flagEnabled(flags, RER_BESF_NO_TROPHY) && RandRange(100) < this.trophy_chance) {
            NLOG("adding 1 trophy " + this.type);
            
            (created_entity as CActor)
              .GetInventory()
              .AddAnItem(
                this.trophy_names[master.settings.trophy_price],
                1
              );
          }

          // add a bounty notice to the entity
          if (RandRange(100) < 3) {
            (created_entity as CActor)
              .GetInventory()
              .AddAnItem(
                'modrer_bounty_notice',
                1
              );
          }

          // add crowns to the entity, based on the settings
          (created_entity as CActor)
          .GetInventory()
          .AddMoney(
            // a random value between 80% and 120%
            this.getCrowns(master.settings, encounter_type, RandRangeF(1.2, 0.8))
          );

          if (!master.settings.enable_encounters_loot) {
            (created_entity as CActor)
              .GetInventory()
              .EnableLoot(false);
          }

          created_entities.PushBack(created_entity);

          group_positions_index += 1;
        }
      }
    }

    if (damage_modifier) {
      for (i = 0; i < created_entities.Size(); i += 1) {
        npc = created_entities[i] as CNewNPC;

        // reduced damage isn't very fun, instead scale the health of the target
        // but also give it some HP regen.
        if (damage_modifier.damage_received_modifier != 1.0) {
          npc.abilityManager.SetStatPointMax(
            BCS_Essence,
            npc.GetMaxHealth() * (1 / damage_modifier.damage_received_modifier)
          );

          npc.abilityManager.SetStatPointMax(
            BCS_Vitality,
            npc.GetMaxHealth() * (1 / damage_modifier.damage_received_modifier)
          );

          npc.SetHealth(npc.GetMaxHealth());

          if (
            damage_modifier.damage_received_modifier > 0
            && damage_modifier.damage_received_modifier < 1
          ) {
            var params: SCustomEffectParams;

            params.effectType = EET_AutoEssenceRegen;
            params.creator = NULL;

            // convert 1% of damage resistance into 1% HP regen per 2 minutes
            params.effectValue.valueMultiplicative = (1 - damage_modifier.damage_received_modifier) / (60 * 2);
            NLOG("%HP regen per second = " + params.effectValue.valueMultiplicative);
            params.sourceName = "random-encounters-reworked";
            params.duration = -1;
            
            npc.AddEffectCustom(params);
          }

          // past 50% damage reduction monsters get debuffs immunity
          if (damage_modifier.damage_received_modifier < 0.5) {
            (npc as CActor).AddBuffImmunity(EET_Knockdown, 'RandomEncountersReworked', false);
            (npc as CActor).AddBuffImmunity(EET_HeavyKnockdown, 'RandomEncountersReworked', false);
            (npc as CActor).AddBuffImmunity(EET_KnockdownTypeApplicator, 'RandomEncountersReworked', false);
          }

          // make sure to reset the modifier
          damage_modifier.damage_received_modifier = 1;
        }

        npc.sharedutils_damage_modifiers.PushBack(damage_modifier);        
      }
    }

    // notify the ecosystem manager some creatures were added. Every time we spawn
    // something it should slightly increase their power.
    #ifdef ENABLE_ECOSYSTEM {
      if (!RER_flagEnabled(flags, RER_BESF_NO_ECOSYSTEM_EFFECT)) {
        master
          .ecosystem_manager
          .updatePowerForCreatureInCurrentEcosystemAreas(
            this.type,
            // currently leaving this as is. But it may be a good idea to divide this
            // power gain by the power the surrounding areas currently have to avoid
            // an infinitely growing community.
            created_entities.Size() * 0.20,
            position
          );
      }
    };

    RER_addKillingSpreeCustomLootToEntities(
      master.loot_manager,
      created_entities,
      master.ecosystem_frequency_multiplier
    );

    composition_type = this.getRandomCompositionCreature(
      master,
      encounter_type
    );

    composition_entities = this.spawnGroupCompositionCreatures(
      composition_type,
      master,
      position,
      count,
      density,
      encounter_type,
      flags,
      custom_tag,
      composition_count
    );

    created_entities = this.combineEntitiesArrays(
      created_entities,
      composition_entities
    );

    NLOG("BestiaryEntry, spawned " + created_entities.Size() + " " + this.type);

    RER_emitCreatureSpawned(master, this.type, created_entities.Size());

    SUH_makeEntitiesAlliedWithEachother(created_entities);

    return created_entities;
  }

  // checks if the hashed creature name is from this bestiary entry. To get a hashed
  // creature name, use CEntity::GetReadableName() and then use rer_hash_string()
  public function isCreatureHashedNameFromEntry(hashed_name: string): bool {
    var i: int;

    for (i = 0; i < this.template_hashes.Size(); i += 1) {
      if (this.template_hashes[i] == hashed_name) {
        return true;
      }
    }

    return false;
  }

  public latent function getStrongestCompositionCreature(master: CRandomEncounters, maximum_strength: float): CreatureType {
    var output: CreatureType;
    var creatures_preferences: RER_CreaturePreferences;
    var spawn_roll: SpawnRoller_Roll;
    var manager : CWitcherJournalManager;
    var can_spawn_creature: bool;
    var influences: RER_ConstantInfluences;
    var i: int;

    output = CreatureNONE;

    if (maximum_strength <= 0) {
      return CreatureNONE;
    }

    #ifdef ENABLE_BESTIARY_FEATURE {
      // when the option "Only known bestiary creatures" is ON
      // we remove every unknown creatures from the spawning pool
      if (master.settings.only_known_bestiary_creatures) {
        manager = theGame.GetJournalManager();
      }
    };
    
    for (i = 0; i < this.possible_compositions.Size(); i += 1) {
      // if a maximum strength is supplied, we make sure to include only creatures
      // whose strength is within the boundary
      if (maximum_strength > 0 && master.bestiary.entries[this.possible_compositions[i]].ecosystem_delay_multiplier >= maximum_strength) {
        continue;
      }

      #ifdef ENABLE_BESTIARY_FEATURE {
        if (master.settings.only_known_bestiary_creatures) {
          can_spawn_creature = bestiaryCanSpawnEnemyTemplateList(master.bestiary.entries[i].template_list, manager);

          if (!can_spawn_creature) {
            continue;
          }
        }
      };

      if (output == CreatureNONE) {
        output = this.possible_compositions[i];

        continue;
      }

      if (master.bestiary.entries[output].ecosystem_delay_multiplier < master.bestiary.entries[this.possible_compositions[i]].ecosystem_delay_multiplier) {
        output = this.possible_compositions[i];
      }
    }

    return output;
  }

  // Returns a random friendly creature if there is any. Otherwise returns
  // CreatureNONE.
  public latent function getRandomCompositionCreature(master: CRandomEncounters, encounter_type: EncounterType, optional filter: RER_SpawnRollerFilter, optional flags: RER_BestiaryRandomBestiaryEntryFlag): CreatureType {
    var creatures_preferences: RER_CreaturePreferences;
    var spawn_roll: SpawnRoller_Roll;
    var manager : CWitcherJournalManager;
    var can_spawn_creature: bool;
    var influences: RER_ConstantInfluences;
    var i: int;

    if (this.possible_compositions.Size() <= 0) {
      return CreatureNONE;
    }

    master.spawn_roller.reset();

    creatures_preferences = new RER_CreaturePreferences in this;
    creatures_preferences
      .setCurrentRegion(AreaTypeToName(theGame.GetCommonMapManager().GetCurrentArea()));
    
    for (i = 0; i < this.possible_compositions.Size(); i += 1) {
      master.bestiary.entries[this.possible_compositions[i]]
        .setCreaturePreferences(creatures_preferences, encounter_type)
        .fillSpawnRoller(master.spawn_roller);
    }

    #ifdef ENABLE_BESTIARY_FEATURE {
      // when the option "Only known bestiary creatures" is ON
      // we remove every unknown creatures from the spawning pool
      if (master.settings.only_known_bestiary_creatures && !RER_flagEnabled(flags, RER_BREF_IGNORE_BESTIARY)) {
        manager = theGame.GetJournalManager();

        for (i = 0; i < CreatureMAX; i += 1) {
          can_spawn_creature = bestiaryCanSpawnEnemyTemplateList(master.bestiary.entries[i].template_list, manager);
          
          if (!can_spawn_creature) {
            master.spawn_roller.setCreatureCounter(i, 0);
          }
        }
      }
    };

    if (filter) {
      master.spawn_roller.applyFilter(filter);
    }

    spawn_roll = master.spawn_roller.rollCreatures(
      master.ecosystem_manager
    );

    return spawn_roll.roll;
  }

  public function combineEntitiesArrays(a: array<CEntity>, b: array<CEntity>): array<CEntity> {
    var output: array<CEntity>;
    var a_size: int;
    var i: int;

    a_size = a.Size();
    // output.Resize(a_size + b.Size());

    for (i = 0; i < a.Size(); i += 1) {
      output.PushBack(a[i]);
    }

    for (i = 0; i < b.Size(); i += 1) {
      output.PushBack(b[i]);
    }

    return output;
  }

  public latent function spawnGroupCompositionCreatures(
    creature: CreatureType,
    master: CRandomEncounters,
    position: Vector,
    optional count: int,
    optional density: float,
    optional encounter_type: EncounterType,
    optional flags: RER_BestiaryEntrySpawnFlag,
    optional custom_tag: name,
    optional composition_count: int): array<CEntity> {
    var bestiary_entry: RER_BestiaryEntry;
    var entities: array<CEntity>;
    var max: int;
    var i: int;

    // composition groups are recursive, a spawned group causes a composition to
    // appear. But that composition can have its own composition.
    // We add a failsafe to avoid a recursive crash/stack-overflow.
    if (creature == CreatureNONE || composition_count > 0) {
      return entities;
    }

    bestiary_entry = master.bestiary.entries[creature];

    // 75% to not spawn any composition
    if (RandRange(100) < 75) {
      return entities;
    }

    // at the moment `count` is the amount of creatures from the initial group
    max = (this.ecosystem_delay_multiplier * count / bestiary_entry.ecosystem_delay_multiplier) as int;
    count = Clamp(
      // once we're sure compositions can spawn, we get a random value between
      // the maximum number of allies and 80% of that number. The maximum number
      // of allies is calculated from the original group' strength and the
      // strength of the new allies.
      RandRange(
        max,
        (max * 0.8) as int
      ),
      // a maximum of 5 times more allies than in the original group
      // this will not affect small creatures who often come in large groupes
      // but will limit the amount of allies for creatures with a high strength.
      // Like 15 harpies from 1 wyvern
      count * 5,
      0
    );

    if (count <= 0) {
      return entities;
    }

    entities = bestiary_entry.spawn(
      master,
      position,
      count,
      density,
      encounter_type,
      flags,
      custom_tag,
      composition_count + 1
    );

    for (i = 0; i < entities.Size(); i += 1) {
      entities[i].GetRootAnimatedComponent().SetScale(Vector(0.95, 0.95, 0.95, 0.95));
      (entities[i] as CActor).SetHealthPerc(60);
    }

    return entities;
  }

  public function getCrowns(
    settings: RE_Settings,
    encounter_type: EncounterType,
    optional multiplier: float
  ): int {
    if (multiplier <= 0) {
      multiplier = 1.0;
    }

    return FloorF(
      settings.crowns_amounts_by_encounter[encounter_type]
      * this.crowns_percentage
      * multiplier
    );
  }

  public function toLocalizedName(): string {
    return GetLocStringByKey(this.localized_name);
  }
}

class RER_BestiaryEntryNull extends RER_BestiaryEntry {
  default type = CreatureNONE;

  public function isNull(): bool {
    return true;
  }
}

enum RER_BestiaryEntrySpawnFlag {
  RER_BESF_NONE = 0,
  RER_BESF_NO_TROPHY = 1,
  RER_BESF_NO_PERSIST = 2,
  RER_BESF_NO_ECOSYSTEM_EFFECT = 4,

  // if set, it will ignore the bestiary feature that removes unknown
  // creatures from the spawn. It's used for the bounties where settings are
  // ignored.
  RER_BESF_NO_BESTIARY_FEATURE = 8
}
